/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package learn;

import java.io.*;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Generic
 */
public class Scan_MGFGUI extends javax.swing.JFrame {

    /**
     * Creates new form Scan_MGFGUI
     */
    public Scan_MGFGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileButton = new javax.swing.JButton();
        fileChooser = new javax.swing.JFileChooser();
        massInput = new javax.swing.JTextField();
        masslabel = new javax.swing.JLabel();
        massexlabel = new javax.swing.JLabel();
        thresholdInput = new javax.swing.JTextField();
        massthresholdlabel = new javax.swing.JLabel();
        massthresholdexlabel = new javax.swing.JLabel();
        minIntensityInput = new javax.swing.JTextField();
        minintensitylabel = new javax.swing.JLabel();
        minintensityexlabel = new javax.swing.JLabel();
        findMatches = new javax.swing.JButton();
        fileName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MGF Scanner");

        fileButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fileButton.setText("choose .mgf file");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        massInput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        massInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massInputActionPerformed(evt);
            }
        });

        masslabel.setText("mass");

        massexlabel.setText("(ex: 569.0)");

        thresholdInput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        thresholdInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdInputActionPerformed(evt);
            }
        });

        massthresholdlabel.setText("mass threshold [+/-]");

        massthresholdexlabel.setText("(ex: 1.234)");

        minIntensityInput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        minintensitylabel.setText("minimum relative intensity percentage [%]");

        minintensityexlabel.setText("(ex: 50.0)");

        findMatches.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findMatches.setText("find matches");
        findMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMatchesActionPerformed(evt);
            }
        });

        fileName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel2.setText("2019 Brandon Lam");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(massInput, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .addComponent(thresholdInput)
                            .addComponent(minIntensityInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(massexlabel)
                            .addComponent(massthresholdexlabel)
                            .addComponent(minintensityexlabel)
                            .addComponent(minintensitylabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(masslabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(massthresholdlabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(findMatches, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(massexlabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(massthresholdlabel)
                        .addGap(1, 1, 1)
                        .addComponent(massthresholdexlabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minintensitylabel)
                        .addGap(2, 2, 2)
                        .addComponent(minintensityexlabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(massInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(masslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(thresholdInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(minIntensityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(findMatches)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        
        String userDirLocation = System.getProperty("user.dir");
        File userDir = new File(userDirLocation);
        
        fileChooser = new javax.swing.JFileChooser(userDir);
        
        int returnVal = fileChooser.showOpenDialog(this);
        
        File thing = fileChooser.getSelectedFile();
        
        if(thing!=null){
            fileName.setText(thing.getName());
        }
        else{
            fileName.setText("No File Selected!");
        }
        
    }//GEN-LAST:event_fileButtonActionPerformed

    private void massInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_massInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_massInputActionPerformed

    private void thresholdInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_thresholdInputActionPerformed

    private void findMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMatchesActionPerformed
        File thing = fileChooser.getSelectedFile();
        
        float mass = Float.parseFloat(massInput.getText());
        float threshold = Float.parseFloat(thresholdInput.getText());
        float minIntensity = Float.parseFloat(minIntensityInput.getText());
                
        String outYay = "";
        try {
            outYay = scan(mass,threshold,minIntensity,thing);
        } catch (IOException ex) {
            Logger.getLogger(Scan_MGFGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String date = outYay.substring(0,outYay.indexOf("\n"));
        new output(outYay, thing.getName(), date).setVisible(true);
        
        //System.out.println(outYay);
    }//GEN-LAST:event_findMatchesActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed

    }//GEN-LAST:event_fileChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scan_MGFGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Scan_MGFGUI().setVisible(true);
        });
    }
    
    public String scan(float mass, float threshold, float minIntensity, File file) throws IOException, FileNotFoundException {

	Scanner mgf = new Scanner(file);

	long begin = System.currentTimeMillis();

	String output = "";

	DateFormat sdf = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
	Date date = new Date();
	output += sdf.format(date) + "\n";

	output += "file: " + file.getName() + "\n";
	output += "minimum mass: " + mass + "\n";
	output += "mass threshold [+/-]: " + threshold + "\n";
	output += "minimum relative intensity [%]: " + minIntensity + "\n";
        
	while (mgf.hasNext()) {
		String y = "";

		String line = mgf.nextLine();

		while (!line.equals("BEGIN IONS") && mgf.hasNext()) {
			line = mgf.nextLine();
		}
		if (!mgf.hasNext()) {
			break;
		}

		line = mgf.nextLine();
		int index1 = line.indexOf("SpectrumID: ") + 13;
		int index2 = line.substring(index1).indexOf("\";") + index1;
                float maxIntensity = 0;
		int SpectrumID = Integer.parseInt(line.substring(index1, index2));

		for (int i = 0; i < 4; i++) {
			mgf.nextLine();
		}
                
                
                //determine highest intensity
                //store input (if meets threshold) in string to be retrieved later
                String input = "";
		while (!line.equals("END IONS")) {
			line = mgf.nextLine();

			if (line.equals("END IONS")) {
                            break;
			}
                        
                        String[] pair = line.split(" ");
                        float val1 = Float.parseFloat(pair[0]);
                        float val2 = Float.parseFloat(pair[1]);
                        
                        //reduces # of lines saves to be read later
                        //only saves if mass within threshold
                        if(Math.abs(val1 - mass) <= threshold){
                            input+=line+",";
                        }
                        
                        maxIntensity = Math.max(maxIntensity, val2);
                        
		}
                
                //now processing input if it met the mass threshold
                String[] inputz = {};
                if(input.length()>0){
                    
               
                inputz = input.split(",");
                for(String linez: inputz){
                    String[] pair = linez.split(" ");

                    float val1 = Float.parseFloat(pair[0]);
                    float val2 = Float.parseFloat(pair[1]);
                    
                    float percentIntensity = val2/maxIntensity;
                    
                    if (percentIntensity >= (minIntensity/100)) {
                        y = y + pair[0] + " " + pair[1] + " ("+ percentIntensity*100 + "%) " + "\n";
                    }
                    
                }
            }
                
		if (y.length() > 0) {
			output += "\nSpectrum ID " + SpectrumID + "\n" + y;
			y = "";
		}

	}
        
	output += "\n";
	long end = System.currentTimeMillis();
	double time = (end - begin) / 1000.0;
	output += "Runtime: " + time + " seconds";

	return output;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fileButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileName;
    private javax.swing.JButton findMatches;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField massInput;
    private javax.swing.JLabel massexlabel;
    private javax.swing.JLabel masslabel;
    private javax.swing.JLabel massthresholdexlabel;
    private javax.swing.JLabel massthresholdlabel;
    private javax.swing.JTextField minIntensityInput;
    private javax.swing.JLabel minintensityexlabel;
    private javax.swing.JLabel minintensitylabel;
    private javax.swing.JTextField thresholdInput;
    // End of variables declaration//GEN-END:variables

}
